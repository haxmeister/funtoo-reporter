#!/usr/bin/env perl
package main;

## Author : Joshua S. Day (haxmeister)
## Purpose : An anonymous funtoo data reporting tool
## With code from: Palica, Tom Ryder and ShadowM00n
##
## written with the following additional packages
##
## from funtoo repository:
## dev-perl/JSON-2.900.0
##
## also from Github
## The accompanying "Report.pm" module

use 5.014;
use strict;             #core
use warnings;           #core
use Getopt::Long;       #core
use JSON;               #cpan
use Term::ANSIColor;    #core
use Funtoo::Report;     #GIT
use HTTP::Tiny;         #core

our $VERSION = '2.0.1-alpha';

my %es_config = (
    node  => 'https://elk.liguros.net:9200',
    index => Funtoo::Report::report_time('short'),
    type  => 'report'
);

# parse options
my $debug = 0;
GetOptions( 'debug|d' => \$debug )
    or die "Error in command line arguments\n";

# dispatch table of script actions
my %actions = (

    # generate and print JSON report, but don't submit it
    'show-json' => sub {

        # get the entire report
        my %report = report_from_config();

        # generate a json object that we can use to convert to json
        my $json = JSON->new->allow_nonref;

        # send the report to the json object to be encoded to json
        # and print the results with proper indents (pretty)
        my $json_pretty = $json->pretty->encode( \%report );
        print $json_pretty;
    },

    # generate and send JSON report, and print URL
    'send' => sub {

        # get the entire report
        my %report = report_from_config();
        Funtoo::Report::send_report( \%report, \%es_config, $debug );
    },

    # update configuration file
    'config-update' => \&Funtoo::Report::config_update,

    # show script help
    'help' => \&show_help,

    # print script and module versions
    'version' => sub {
        printf "funtoo-report: %s\nFuntoo::Report: %s\n",
            $VERSION,
            Funtoo::Report::version(),
            ;
    },
);

# pull action from script arguments if possible
if ( length( my $action = shift @ARGV ) ) {
    exists $actions{$action}
        or die "Unknown action '$action'\n";
    $actions{$action}->();
}
else {
    show_help();
}

## if you don't understand this function.. you need to just close this
## file now before you mess something up
sub show_help {
    print color('bold');
    print "\nFuntoo anonymous data reporting tool usage: \n\n";

    print color('bold blue');
    print "funtoo-report send";
    print color('reset');
    print "\t\t Send the report to funtoo's data collection\n";

    print color('bold blue');
    print "funtoo-report show-json";
    print color('reset');
    print " \t Show the output that will be sent, in JSON format\n";

    print color('bold blue');
    print "funtoo-report config-update";
    print color('reset');
    print " \t Generate, reconfigure or update the config file";
    print color('reset') . " /etc/funtoo-report.conf\n";

    print color('bold blue');
    print "funtoo-report help";
    print color('reset');
    print " \t\t Show this help list\n";

    print color('bold blue');
    print "funtoo-report version";
    print color('reset');
    print " \t\t Show script and module version\n";

    print color('bold blue');
    print "funtoo-report check-version";
    print color('reset');
    print " \t Check your version against the latest available version\n";

    print color('bold');
    print "\nOutput can be ommitted by modifying ";
    print color('reset');
    print "/etc/funtoo-report.conf ";
    print color('bold');
    print "manually or using ";
    print color('reset');
    print "funtoo-report config-update\n\n";
    print color('reset');

    return 0;
}

## let's read the config file and generate the report
sub report_from_config {
    my %config = Funtoo::Report::user_config();  # fetch/parse the user config
    my %hash;

    # look for a UUID in the config file and
    # if it's not there, add one
    if ( exists $config{'UUID'} ) {
        $es_config{'id'} = $config{'UUID'};
    }
    else {
        $es_config{'id'} = Funtoo::Report::add_uuid();
    }

    # let's load a hash with the possible config file options as keys
    # and the values will be a pointer to the function that generates
    # the associated information
    my %sections = (
        'boot-dir-info'  => \&Funtoo::Report::get_boot_dir_info,
        'kernel-info'    => \&Funtoo::Report::get_kernel_info,
        'kit-info'       => \&Funtoo::Report::get_kit_info,
        'profile-info'   => \&Funtoo::Report::get_profile_info,
        'version-info'   => \&Funtoo::Report::get_version_info,
        'world-info'     => \&Funtoo::Report::get_world_info,
        'installed-pkgs' => \&Funtoo::Report::get_all_installed_pkg,
        'hardware-info'  => \&Funtoo::Report::get_hardware_info,

    );

    # check each key and see if it's in the config file
    for my $report ( sort keys %sections ) {
        exists $config{$report} or next;

        # does the key have a 'y' in the config?
        $config{$report} eq 'y' or next;

        # if so, call the function and add the returned
        # hash table to the report
        $hash{$report} = $sections{$report}->();
    }

    ## adding UUID to the body of the report
    #
    $hash{'funtoo-report'}{'UUID'} = $config{'UUID'};

    ## adding timestamp to report
    #
    $hash{'timestamp'} = Funtoo::Report::report_time('long');

    ## adding version number to report
    #
    $hash{'funtoo-report'}{'version'} = Funtoo::Report::version();

    ## adding any non fatal errors to the report
    #
    $hash{'funtoo-report'}{'errors'} = Funtoo::Report::errors();

    return %hash;
}

__END__

=pod

=head1 NAME

funtoo-report - An anonymous Funtoo data reporting tool

=head1 USAGE

    funtoo-report [-d|--debug] (config-update|show-json|send|help|version)

=head1 DESCRIPTION

This script is the frontend to C<Funtoo::Report>, allowing you to create
configuration files and generate full report data in JSON to view and submit to
the ElasticSearch servers.

=head1 REQUIRED ARGUMENTS

Available options are:

=over 4

=item C<config-update>

Generate or update the configuration file C</etc/funtoo-report.conf>.

=item C<show-json>

Generate the system report according to the configuration file, and print it to
standard output.

=item C<send>

Generate the system report and send it to the hardcoded ElasticSearch server.

=item C<help>

Print usage help.

=item C<version>

Print script and module versions.

=back

=head1 OPTIONS

=over 4

=item C<-d>, C<--debug>

Enable debugging mode. At present, this only prints the JSON response from the
ElasticSearch server with the C<send> subcommand.

=back

=head1 DIAGNOSTICS

This section to be completed. The code (well, its module) emits very many error
messages that should hopefully be at least partly self-explanatory.

=head1 EXIT STATUS

Exits successfully unless the subcommand argument given is absent or unknown.

=head1 CONFIGURATION

The configuration file C</etc/funtoo-report.conf> is required and can be
generated with the C<config-update> subcommand (recommended).

=head1 DEPENDENCIES

=over 4

=item *

Perl v5.14.0 or newer

=item *

L<Funtoo::Report>

=item *

L<Getopt::Long>

=item *

L<HTTP::Tiny>

=item *

L<JSON>

=item *

L<Term::ANSIColor>

=back

=head1 INCOMPATIBILITIES

This script is almost certainly only useful on a Funtoo computer.

=head1 BUGS AND LIMITATIONS

Definitely. To report bugs or make feature requests, please raise an issue on
GitHub at L<https://github.com/haxmeister/funtoo-reporter>.

=head1 AUTHOR

The Funtoo::Report development team:

=over 4

=item *

Joshua Day C<< <haxmeister@hotmail.com> >>

=item *

Palica C<< <palica@cupka.name> >>

=item *

ShadowM00n C<< <shadowm00n@airmail.cc> >>

=item *

Tom Ryder C<< <tom@sanctum.geek.nz> >>

=back

=head1 LICENSE AND COPYRIGHT

MIT License

Copyright (c) 2018 Haxmeister

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=cut
