package Liguros::CPUinfo;

use Moose;							 #CPAN
use JSON;							 #core
use Time::HiRes qw(gettimeofday);    #core
use Carp;                            #core
use English qw(-no_match_vars);      #core

has 'cpu_file'   => (is      => 'ro', 
					 default => '/proc/cpuinfo',);

has 'errors'     => (is      => 'ro',
					 isa     => 'ArrayRef',
					 default => sub{[]});

has 'timer'      => (is      => 'ro',);
has 'model'      => (is      => 'ro',); 
has 'MHz'        => (is      => 'ro',);
has 'processors'  => (is      => 'ro',);
has 'flags'      => (is      => 'ro', 
					 isa     => 'ArrayRef',);


my $cpu_file;
my $start_time = gettimeofday;
my %data;
my $timer;


sub BUILD {
	my $self = shift;
	my @cpu_file_contents;
	my $proc_count = 0;
	
	if ( open( my $fh, '<:encoding(UTF-8)', $self->cpu_file ) ) {
		@cpu_file_contents = <$fh>;
		close $fh;
	}else{
        push_error("Could not open file $cpu_file: $ERRNO");
        return;	
	}
	
	foreach my $row (@cpu_file_contents) {
		chomp $row;
        if ($row) {
			
			my ( $key, $value ) = split /\s*:\s*/msx, $row;

            if ( $key eq 'model name' ) {
				$data{model} = $value;
            }
            elsif ( $key eq 'flags' ) {
				my @cpu_flags = split / /, $value;
                $data{flags} = \@cpu_flags;
            }
            elsif ( $key eq 'cpu MHz' ) {
				$data{MHz} = $value * 1;
            }
            elsif ( $key eq 'processor' ) {
				$proc_count = $proc_count + 1;
            }
		}
    }
	push (@{$self->errors}, 0);
	$data{processors} = $proc_count;
	
	$self->{timer} = sprintf( "%.4f", ( gettimeofday - $start_time ) * 1000 ) + 0;
	$self->{processors} = $data{processors};
	$self->{MHz} = $data{MHz};
	$self->{flags} = $data{flags};
	$self->{model} = $data{model};
}

sub get_json{
	my $self = shift;
	
    my $json = JSON->new->allow_nonref;
	my $json_pretty = $json->pretty->encode( \%data );
    return $json_pretty;
}

1;
